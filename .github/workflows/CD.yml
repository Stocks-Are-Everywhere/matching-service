name: CD

# CI 워크플로우가 성공적으로 완료된 후에만 실행
on:
  workflow_run:
    workflows: ["CI"] 
    types:
      - completed
    branches:
      - main 
  workflow_dispatch:


jobs:
  deploy:
    # CI 워크플로우가 성공한 경우에만 실행
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: platypus3036/matching-service:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create env file
        run: |
          cat > env-config.sh << 'EOF'
          cat > /tmp/matching-service.env << 'INNEREOF'
          RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}
          RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}
          RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          INNEREOF
          chmod 600 /tmp/matching-service.env
          EOF
          chmod +x env-config.sh
          
      - name: Deploy to EC2
        env:
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
        run: |
          aws ssm send-command \
            --instance-ids $EC2_INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              \"echo \\\"${{ secrets.DOCKERHUB_TOKEN }}\\\" | docker login -u \\\"${{ secrets.DOCKERHUB_USERNAME }}\\\" --password-stdin\",
              \"docker pull ${{ secrets.DOCKERHUB_USERNAME }}/matching-service\",
              \"docker stop matching-service || true\",
              \"docker rm matching-service || true\",
              \"$(cat env-config.sh)\",
              \"docker run -d --name matching-service --restart always -p 8082:8082 --env-file /tmp/matching-service.env ${{ secrets.DOCKERHUB_USERNAME }}/matching-service\",
              \"docker image prune -af --filter \\\"until=24h\\\"\",
              \"rm /tmp/matching-service.env\"
            ]"

      - name: Deployment notification
        if: success()
        run: echo "주문 서비스가 성공적으로 배포되었습니다."
            
